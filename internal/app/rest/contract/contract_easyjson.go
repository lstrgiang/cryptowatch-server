// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package contract

import (
	json "encoding/json"
	data "github.com/lstrgiang/cryptowatch-server/internal/data"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson42340b0aDecodeGithubComLstrgiangCryptowatchServerInternalAppRestContract(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "email":
			out.Email = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson42340b0aEncodeGithubComLstrgiangCryptowatchServerInternalAppRestContract(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v User) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson42340b0aEncodeGithubComLstrgiangCryptowatchServerInternalAppRestContract(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v User) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson42340b0aEncodeGithubComLstrgiangCryptowatchServerInternalAppRestContract(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *User) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson42340b0aDecodeGithubComLstrgiangCryptowatchServerInternalAppRestContract(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *User) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson42340b0aDecodeGithubComLstrgiangCryptowatchServerInternalAppRestContract(l, v)
}
func easyjson42340b0aDecodeGithubComLstrgiangCryptowatchServerInternalAppRestContract1(in *jlexer.Lexer, out *Price) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "price":
			out.Price = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson42340b0aEncodeGithubComLstrgiangCryptowatchServerInternalAppRestContract1(out *jwriter.Writer, in Price) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix[1:])
		out.Float64(float64(in.Price))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Price) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson42340b0aEncodeGithubComLstrgiangCryptowatchServerInternalAppRestContract1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Price) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson42340b0aEncodeGithubComLstrgiangCryptowatchServerInternalAppRestContract1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Price) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson42340b0aDecodeGithubComLstrgiangCryptowatchServerInternalAppRestContract1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Price) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson42340b0aDecodeGithubComLstrgiangCryptowatchServerInternalAppRestContract1(l, v)
}
func easyjson42340b0aDecodeGithubComLstrgiangCryptowatchServerInternalAppRestContract2(in *jlexer.Lexer, out *OrderSlice) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(OrderSlice, 0, 0)
			} else {
				*out = OrderSlice{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 Order
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson42340b0aEncodeGithubComLstrgiangCryptowatchServerInternalAppRestContract2(out *jwriter.Writer, in OrderSlice) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v OrderSlice) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson42340b0aEncodeGithubComLstrgiangCryptowatchServerInternalAppRestContract2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrderSlice) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson42340b0aEncodeGithubComLstrgiangCryptowatchServerInternalAppRestContract2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OrderSlice) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson42340b0aDecodeGithubComLstrgiangCryptowatchServerInternalAppRestContract2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrderSlice) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson42340b0aDecodeGithubComLstrgiangCryptowatchServerInternalAppRestContract2(l, v)
}
func easyjson42340b0aDecodeGithubComLstrgiangCryptowatchServerInternalAppRestContract3(in *jlexer.Lexer, out *Order) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ID).UnmarshalText(data))
			}
		case "type":
			out.Type = data.OrderType(in.String())
		case "usd_price":
			out.USDPrice = float64(in.Float64())
		case "amount":
			out.Amount = float64(in.Float64())
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson42340b0aEncodeGithubComLstrgiangCryptowatchServerInternalAppRestContract3(out *jwriter.Writer, in Order) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.RawText((in.ID).MarshalText())
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"usd_price\":"
		out.RawString(prefix)
		out.Float64(float64(in.USDPrice))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		out.Float64(float64(in.Amount))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Order) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson42340b0aEncodeGithubComLstrgiangCryptowatchServerInternalAppRestContract3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Order) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson42340b0aEncodeGithubComLstrgiangCryptowatchServerInternalAppRestContract3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Order) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson42340b0aDecodeGithubComLstrgiangCryptowatchServerInternalAppRestContract3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Order) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson42340b0aDecodeGithubComLstrgiangCryptowatchServerInternalAppRestContract3(l, v)
}
